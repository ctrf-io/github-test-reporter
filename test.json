{
  "results": {
    "tool": {
      "name": "jest"
    },
    "summary": {
      "tests": 65,
      "passed": 65,
      "failed": 0,
      "pending": 0,
      "skipped": 0,
      "other": 0,
      "start": 1753814301032,
      "stop": 1753814313709,
      "extra": {
        "flakyRate": 0,
        "flakyRateChange": 0,
        "failRate": 0,
        "failRateChange": 0,
        "finalResults": 0,
        "finalFailures": 0,
        "result": "passed"
      }
    },
    "tests": [
      {
        "name": "String Helpers splitLines should split lines correctly for multiline strings",
        "duration": 21,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should filter out empty lines",
        "duration": 3,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should handle undefined values gracefully",
        "duration": 6,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should handle null values gracefully",
        "duration": 5,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should handle empty strings",
        "duration": 4,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should handle strings with only whitespace",
        "duration": 3,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "String Helpers splitLines should handle single line strings",
        "duration": 2,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/handlebars/string.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "string.test.ts > String Helpers > splitLines"
      },
      {
        "name": "getEmoji returns the correct emoji for \"passed\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"failed\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"skipped\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"pending\"",
        "duration": 7,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"other\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"build\"",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"duration\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"flaky\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"tests\"",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "getEmoji returns the correct emoji for \"result\"",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > getEmoji"
      },
      {
        "name": "stripAnsi removes ANSI escape codes from a string",
        "duration": 5,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > stripAnsi"
      },
      {
        "name": "stripAnsi returns the same string if no ANSI codes are present",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > stripAnsi"
      },
      {
        "name": "stripAnsi handles empty strings correctly",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > stripAnsi"
      },
      {
        "name": "stripAnsi throws a TypeError if the input is not a string",
        "duration": 38,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/helpers.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "helpers.test.ts > stripAnsi"
      },
      {
        "name": "addFooterDisplayFlags Current suite (no previous results) should set includeFailedReportCurrentFooter when no tests fail in current run",
        "duration": 6,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Current suite (no previous results)"
      },
      {
        "name": "addFooterDisplayFlags Current suite (no previous results) should NOT set includeFailedReportCurrentFooter when tests fail in current run",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Current suite (no previous results)"
      },
      {
        "name": "addFooterDisplayFlags Current suite (no previous results) should NOT set includeFlakyReportCurrentFooter when flaky tests exist in current run",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Current suite (no previous results)"
      },
      {
        "name": "addFooterDisplayFlags Current suite (no previous results) should set includeFlakyReportCurrentFooter when no tests flaky in current run",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Current suite (no previous results)"
      },
      {
        "name": "addFooterDisplayFlags Current suite (no previous results) should NOT set footer flags when both failed and flaky tests exist in current run",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Current suite (no previous results)"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) Current run scenarios should set includeMeasuredOverFooter when tests fail in current run",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > Current run scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) Current run scenarios should set includeMeasuredOverFooter when flaky tests exist in current run",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > Current run scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) Current run scenarios should set includeMeasuredOverFooter when both failed and flaky tests exist in current run",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > Current run scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) All runs scenarios should NOT set includeFailedReportAllFooter when tests failed across all runs",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > All runs scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) All runs scenarios should NOT set includeFlakyReportAllFooter when flaky tests exist across all runs",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > All runs scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) All runs scenarios should set includeFailedReportAllFooter when no tests failed across all runs",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > All runs scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) All runs scenarios should set includeFlakyReportAllFooter when no flaky tests across all runs",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > All runs scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) Combined scenarios should handle tests failing in current AND across all runs",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > Combined scenarios"
      },
      {
        "name": "addFooterDisplayFlags Previous suite (with previous results) Combined scenarios should handle flaky tests in current AND across all runs",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Previous suite (with previous results) > Combined scenarios"
      },
      {
        "name": "addFooterDisplayFlags Show reports flags should always show reports when only one report enabled",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Show reports flags"
      },
      {
        "name": "addFooterDisplayFlags Show reports flags should hide reports when multiple reports enabled and no failures",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Show reports flags"
      },
      {
        "name": "addFooterDisplayFlags Show reports flags should show failed reports when failures exist",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Show reports flags"
      },
      {
        "name": "addFooterDisplayFlags Show reports flags should show flaky reports when flaky tests exist",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Show reports flags"
      },
      {
        "name": "addFooterDisplayFlags Show reports flags should show skipped reports when skipped tests exist",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Show reports flags"
      },
      {
        "name": "addFooterDisplayFlags Measured Over Footer should set includeMeasuredOverFooter when previous reports exist",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Measured Over Footer"
      },
      {
        "name": "addFooterDisplayFlags Measured Over Footer should NOT set includeMeasuredOverFooter when no previous reports exist",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Measured Over Footer"
      },
      {
        "name": "addFooterDisplayFlags Measured Over Footer should NOT set includeMeasuredOverFooter when previous reports array is empty",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > addFooterDisplayFlags > Measured Over Footer"
      },
      {
        "name": "Inputs with maxPreviousRunsToFetch should handle maxPreviousRunsToFetch parameter correctly",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/ctrf/report-preparation.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "report-preparation.test.ts > Inputs with maxPreviousRunsToFetch"
      },
      {
        "name": "createStatusCheck should create a successful check run when no tests failed",
        "duration": 6,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > createStatusCheck"
      },
      {
        "name": "createStatusCheck should create a failed check run when tests failed",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > createStatusCheck"
      },
      {
        "name": "createStatusCheck should truncate summary if it exceeds 65000 characters",
        "duration": 2,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > createStatusCheck"
      },
      {
        "name": "findExistingMarkedComment should return undefined when no comments exist",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > findExistingMarkedComment"
      },
      {
        "name": "findExistingMarkedComment should return undefined when no comment with marker exists",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > findExistingMarkedComment"
      },
      {
        "name": "findExistingMarkedComment should find marked comment and identify it is not latest",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > findExistingMarkedComment"
      },
      {
        "name": "findExistingMarkedComment should find marked comment and identify it is latest",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > findExistingMarkedComment"
      },
      {
        "name": "findExistingMarkedComment should find the latest marked comment when multiple exist",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > findExistingMarkedComment"
      },
      {
        "name": "handleComment New PR - All flags disabled should create new comment when no comments exist",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > New PR - All flags disabled"
      },
      {
        "name": "handleComment New PR - updateComment enabled should create new comment when no comment exists and updateComment enabled",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > New PR - updateComment enabled"
      },
      {
        "name": "handleComment New PR - updateComment enabled should create new comment when no comment exists and updateComment and alwaysLatest enabled",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > New PR - updateComment enabled"
      },
      {
        "name": "handleComment New PR - overwriteComment enabled should create new comment when no comment exists and overwriteComment enabled",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > New PR - overwriteComment enabled"
      },
      {
        "name": "handleComment New PR - overwriteComment enabled should create new comment when no comment exists and overwriteComment and alwaysLatest enabled",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > New PR - overwriteComment enabled"
      },
      {
        "name": "handleComment Existing PR - All flags disabled should create new comment when comment found and no flags enabled",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - All flags disabled"
      },
      {
        "name": "handleComment Existing PR - updateComment enabled should update existing comment when updateComment enabled",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - updateComment enabled"
      },
      {
        "name": "handleComment Existing PR - updateComment enabled should update existing comment when updateComment enabled and alwaysLatest enabled and comment is latest",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - updateComment enabled"
      },
      {
        "name": "handleComment Existing PR - updateComment enabled should create new comment when updateComment enabled and alwaysLatest enabled and comment is not latest",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - updateComment enabled"
      },
      {
        "name": "handleComment Existing PR - overwriteComment enabled should overwrite existing comment when overwriteComment enabled",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - overwriteComment enabled"
      },
      {
        "name": "handleComment Existing PR - overwriteComment enabled should overwrite existing comment when overwriteComment enabled and alwaysLatest enabled and comment is latest",
        "duration": 1,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - overwriteComment enabled"
      },
      {
        "name": "handleComment Existing PR - overwriteComment enabled should create new comment when overwriteComment enabled and alwaysLatest enabled and comment is not latest",
        "duration": 0,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleComment > Existing PR - overwriteComment enabled"
      },
      {
        "name": "handleViewsAndComments should create a check run with views and comments",
        "duration": 44,
        "status": "passed",
        "rawStatus": "passed",
        "type": "unit",
        "filePath": "/home/runner/work/github-test-reporter/github-test-reporter/__tests__/github/handler.test.ts",
        "retries": 0,
        "flaky": false,
        "suite": "handler.test.ts > handleViewsAndComments"
      }
    ],
    "environment": {
      "extra": {
        "runId": 16604526985,
        "runNumber": 710,
        "buildUrl": "https://github.com/ctrf-io/github-test-reporter/actions/runs/16604526985#summary",
        "runName": "build-and-test"
      },
      "buildName": "build-and-test",
      "buildNumber": "710",
      "buildUrl": "https://github.com/ctrf-io/github-test-reporter/actions/runs/16604526985#summary",
      "buildId": "16604526985",
      "branchName": "chore/add-previous-tests"
    }
  }
}
